name: Build and Deploy Containerized App to EC2
on:
  push:
    branches:
      - main 
jobs:
  build:
    runs-on: ubuntu-latest  

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # GitHub Secret for AWS Secret Access Key
        aws-region: ${{ secrets.AWS_REGION }}  # GitHub Secret for AWS Region

    - name: Login to Amazon ECR
      id: login
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Check Docker version
      run: docker --version

    - name: Build and push the tagged docker image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login.outputs.registry }}
        ECR_REPOSITORY: ${{secrets.ECR_REPOSITORY}}
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
  deploy:
    runs-on: ubuntu-latest  
    needs: build  

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Deploy Docker container to EC2
      run: |
        # # SSH into EC2 and deploy the application
        # ssh -i /path/to/your/private-key.pem ec2-user@${{ secrets.EC2_PUBLIC_IP }} << EOF
    
          docker pull ${{ steps.login.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:latest
          
         
        #   docker stop my-app-container || true
        #   docker rm my-app-container || true

         
          docker run -d --name my-app-container -p 8080:8080 ${{ steps.login.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:latest
      env:
        PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}
  # deploy:
  #   runs-on: ubuntu-latest  
  #   needs: build  

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2

  #   - name: Deploy to EC2
  #     uses: appleboy/ssh-action@v0.1.8
  #     with:
  #       host: ${{ secrets.EC2_PUBLIC_IP }}  # Public IP of the EC2 instance
  #       username: ubuntu  # Use 'ubuntu' for Ubuntu EC2 instances
  #       key: ${{ secrets.EC2_PRIVATE_KEY }}  # EC2 private SSH key (stored as GitHub Secret)
  #       port: 22  # Default SSH port
  #       script: |
  #        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          
  #         # Pull the latest Docker image from ECR
  #         docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:$GITHUB_SHA
          
  #         # Stop and remove the existing container if it's running
  #         docker stop my-app-container 
  #         docker rm my-app-container
          
  #         # Run the Docker container in detached mode, mapping port 80 on the host
  #         docker run -d --name my-app-container -p 80:80 ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:$GITHUB_SHA
